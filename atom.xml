<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YZ</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yanzhen.me/"/>
  <updated>2017-01-17T09:12:42.000Z</updated>
  <id>http://yanzhen.me/</id>
  
  <author>
    <name>Yan Zhen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>009-Palindrome-Number</title>
    <link href="http://yanzhen.me/2016/04/10/009-palindrome-number/"/>
    <id>http://yanzhen.me/2016/04/10/009-palindrome-number/</id>
    <published>2016-04-10T21:02:01.000Z</published>
    <updated>2017-01-17T09:12:42.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Basic-ideas&quot;&gt;&lt;a href=&quot;#Basic-ideas&quot; class=&quot;headerlink&quot; title=&quot;Basic ideas&quot;&gt;&lt;/a&gt;Basic ideas&lt;/h2&gt;&lt;p&gt;Negetive integers are not palindrome. Compare the left-most with the right-most digits step by step.&lt;/p&gt;
&lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isPalindrome&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(x &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; divider = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (x / divider &amp;gt;= &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            divider *= &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; left; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; right;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (x != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            left = x / divider;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            right = x % &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(left != right)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            x = (x - left * divider) / &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            divider /= &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Basic-ideas&quot;&gt;&lt;a href=&quot;#Basic-ideas&quot; class=&quot;headerlink&quot; title=&quot;Basic ideas&quot;&gt;&lt;/a&gt;Basic ideas&lt;/h2&gt;&lt;p&gt;Negetive integers are not palindro
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yanzhen.me/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>008-String-to-Integer-atoi</title>
    <link href="http://yanzhen.me/2016/04/10/008-string-to-integer-atoi/"/>
    <id>http://yanzhen.me/2016/04/10/008-string-to-integer-atoi/</id>
    <published>2016-04-10T18:37:44.000Z</published>
    <updated>2017-01-17T09:12:42.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Basic-ideas&quot;&gt;&lt;a href=&quot;#Basic-ideas&quot; class=&quot;headerlink&quot; title=&quot;Basic ideas&quot;&gt;&lt;/a&gt;Basic ideas&lt;/h2&gt;&lt;p&gt;Find the first none-space character, check validation and the sign, then convert one by one. Once an invalid char or a number that is larger than Integer.MAX comes, return.&lt;/p&gt;
&lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;myAtoi&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String str)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sz = str.length();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(sz == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//find the first none-space char&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; start_index;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(start_index = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; start_index &amp;lt; sz; ++ start_index)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(str.charAt(start_index) != &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; ret = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//if the first char is not valid then return&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; tmp = str.charAt(start_index);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!(Character.isDigit(tmp) || tmp == &lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt; || tmp == &lt;span class=&quot;string&quot;&gt;&#39;+&#39;&lt;/span&gt;))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//if the first valid char means a negative number&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; sign_flag = (str.charAt(start_index) == &lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt;) ? &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt; : &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; pos_flag = Character.isDigit(str.charAt(start_index)) ? &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt; : &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = pos_flag ? start_index + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; : start_index; i &amp;lt; sz; ++ i)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//if a invalid char comes, return the previous result&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!(Character.isDigit(str.charAt(i))))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sign_flag ? -(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)ret : (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)ret;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//if the result is larger than Integer.MAX&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((ret * &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; + (Character.getNumericValue(str.charAt(i)))) &amp;gt; Integer.MAX_VALUE)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sign_flag ? Integer.MIN_VALUE : Integer.MAX_VALUE;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            ret = ret * &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; + Character.getNumericValue(str.charAt(i));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sign_flag ? -(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)ret : (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)ret;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Basic-ideas&quot;&gt;&lt;a href=&quot;#Basic-ideas&quot; class=&quot;headerlink&quot; title=&quot;Basic ideas&quot;&gt;&lt;/a&gt;Basic ideas&lt;/h2&gt;&lt;p&gt;Find the first none-space characte
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yanzhen.me/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>007-Reverse-Integer</title>
    <link href="http://yanzhen.me/2016/04/10/007-reverse-integer/"/>
    <id>http://yanzhen.me/2016/04/10/007-reverse-integer/</id>
    <published>2016-04-10T17:48:30.000Z</published>
    <updated>2017-01-17T09:12:42.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Basic-ideas&quot;&gt;&lt;a href=&quot;#Basic-ideas&quot; class=&quot;headerlink&quot; title=&quot;Basic ideas&quot;&gt;&lt;/a&gt;Basic ideas&lt;/h2&gt;&lt;p&gt;Another boring problem. Need to think over the max value of integer. The maximal value of 32-bit signed integer is $2147483647$, however reversing it becomes $7463847412$, which is larger than the max valuve of integer. A little tricky solution would be using a long variable to check if the result is larger than Integer.MAT_VALUE. &lt;/p&gt;
&lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; flag = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; res = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(x &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            x = -x;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            flag = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(;x &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            res *= &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            res += (x - x/&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            x /= &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(res &amp;gt; Integer.MAX_VALUE)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(flag)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            res = -res;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)res;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Basic-ideas&quot;&gt;&lt;a href=&quot;#Basic-ideas&quot; class=&quot;headerlink&quot; title=&quot;Basic ideas&quot;&gt;&lt;/a&gt;Basic ideas&lt;/h2&gt;&lt;p&gt;Another boring problem. Need to th
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yanzhen.me/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>006-ZigZag-Conversion</title>
    <link href="http://yanzhen.me/2016/03/31/006-zigzag-conversion/"/>
    <id>http://yanzhen.me/2016/03/31/006-zigzag-conversion/</id>
    <published>2016-03-30T22:02:19.000Z</published>
    <updated>2017-01-17T09:12:42.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Basic-ideas&quot;&gt;&lt;a href=&quot;#Basic-ideas&quot; class=&quot;headerlink&quot; title=&quot;Basic ideas&quot;&gt;&lt;/a&gt;Basic ideas&lt;/h2&gt;&lt;p&gt;A boring problem finding some regulations. The step length is $2numRows - 2$. The characters in the first row and the last row jumps regularly by the step length. For the rest rows, the index jumps by 2 different steps, $step1 = 2(numRows - i - 1)$ and $step2 = step - step1$ respectively. Set a flag to switch to the other length of step in the next jump.&lt;/p&gt;
&lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String s, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; numRows)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(s.length() == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; || numRows == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        StringBuilder str = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuilder();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; step = (numRows &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) - &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//first row&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; s.length(); i += step)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            str.append(s.charAt(i));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//middle rows&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; numRows - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; ++ i)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = i; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; flag = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; step1 = (numRows - i - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; step2 = step - step1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (j &amp;lt; s.length())&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                str.append(s.charAt(j));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(flag)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    j += step1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    j += step2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                flag ^= &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//last row&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = numRows - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; s.length(); i += step)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            str.append(s.charAt(i));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; str.toString();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Basic-ideas&quot;&gt;&lt;a href=&quot;#Basic-ideas&quot; class=&quot;headerlink&quot; title=&quot;Basic ideas&quot;&gt;&lt;/a&gt;Basic ideas&lt;/h2&gt;&lt;p&gt;A boring problem finding some regu
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yanzhen.me/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>005-Longest-Palindromic-Substring</title>
    <link href="http://yanzhen.me/2016/03/30/005-longest-palindromic-substring/"/>
    <id>http://yanzhen.me/2016/03/30/005-longest-palindromic-substring/</id>
    <published>2016-03-30T19:11:22.000Z</published>
    <updated>2017-01-17T09:12:42.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Basic-ideas&quot;&gt;&lt;a href=&quot;#Basic-ideas&quot; class=&quot;headerlink&quot; title=&quot;Basic ideas&quot;&gt;&lt;/a&gt;Basic ideas&lt;/h2&gt;&lt;p&gt;Using a classical dynamic-programming style, with a time complexity of $O(N^2)$ and space complexity of $O(N^2)$. A table is introduced to store the palidromic information. If $table[i][j]$ is true, it means the string from $s[i]$ to $s[j]$ is palindromic. Initially, $table[i][i]$ is set to true, as well as $table[i - 1][i]$ if $s[i - 1] == s[i]$. The transition model is, $table[i][j]$ is true if $table[i + 1][j - 1] == true$ and $s[i] == s[j]$. The model is the key point of DP. Upon the loop, the first level is the temporary length that grows from $2$ to $s.length()$. The second level is to keep a window and moves from the begnning to $s.length() - tempLen$, judging if the string inside the window is a valid string. The window’s size subjects to the temporary length. &lt;/p&gt;
&lt;h2 id=&quot;NB&quot;&gt;&lt;a href=&quot;#NB&quot; class=&quot;headerlink&quot; title=&quot;NB&quot;&gt;&lt;/a&gt;NB&lt;/h2&gt;&lt;p&gt;If loop from $0$ to $s.length()$ and assume each character(s) as the center of the palindromic string, then expand the string according to the center, the space complexity could be $O(1)$.&lt;br&gt;Manacher’s algorithm could solve it in a linear time, but is not super easy to implement. &lt;/p&gt;
&lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;longestPalindrome&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String s)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//edge test&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(s.length() &amp;lt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; DUMMY = -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len = s.length(); &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxLen = Integer.MIN_VALUE;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; iMark = DUMMY; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; jMark = DUMMY;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//transition table&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt;[][] table = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt;[len][len];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//initialization&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; len; ++ i)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            table[i][i] = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; len; ++ i)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(s.charAt(i) == s.charAt(i - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 table[i - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][i] = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 maxLen = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 iMark = i - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; jMark = i;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//state transition&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; tempLen = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; tempLen &amp;lt;= len; ++ tempLen)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; len - tempLen; ++ i)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = i + tempLen;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((table[i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]) &amp;amp;&amp;amp; (s.charAt(i) == s.charAt(j)))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    table[i][j] = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(( j - i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;gt; maxLen) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        maxLen = j - i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        iMark = i; jMark = j;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s.substring(iMark, jMark + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Basic-ideas&quot;&gt;&lt;a href=&quot;#Basic-ideas&quot; class=&quot;headerlink&quot; title=&quot;Basic ideas&quot;&gt;&lt;/a&gt;Basic ideas&lt;/h2&gt;&lt;p&gt;Using a classical dynamic-programm
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yanzhen.me/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>004-Median-of-Two-Sorted-Arrays</title>
    <link href="http://yanzhen.me/2016/03/29/004-median-of-two-sorted-arrays/"/>
    <id>http://yanzhen.me/2016/03/29/004-median-of-two-sorted-arrays/</id>
    <published>2016-03-29T04:10:21.000Z</published>
    <updated>2017-01-17T09:12:42.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Basic-ideas&quot;&gt;&lt;a href=&quot;#Basic-ideas&quot; class=&quot;headerlink&quot; title=&quot;Basic ideas&quot;&gt;&lt;/a&gt;Basic ideas&lt;/h2&gt;&lt;h3 id=&quot;Find-the-median&quot;&gt;&lt;a href=&quot;#Find-the-median&quot; class=&quot;headerlink&quot; title=&quot;Find the median&quot;&gt;&lt;/a&gt;Find the median&lt;/h3&gt;&lt;p&gt;This problem could be treated as a special case of find k-th smallest element in two sorted arrays. Say $m$ and $n$ are the lengths of the two arrays respectively. Then, if $m + n$ is odd, find the $ (\frac{m + n}{2} + 1)$th smallest element as the median. If $m + n$ is even, then find the $(\frac{m + n}{2})$th and the $(\frac{m + n}{2} + 1)$th smallest element, then count the average as the median.&lt;/p&gt;
&lt;h3 id=&quot;Find-the-k-th-smallest-element&quot;&gt;&lt;a href=&quot;#Find-the-k-th-smallest-element&quot; class=&quot;headerlink&quot; title=&quot;Find the k-th smallest element&quot;&gt;&lt;/a&gt;Find the k-th smallest element&lt;/h3&gt;&lt;p&gt;Using a divide-and-conquer style could reach a complexity of only $O(logK)$.&lt;br&gt;If there are two arrays, $arr1$ and $arr2$, then compare the values of $arr1[\frac{k}{2}]$ and $arr2[\frac{k}{2}]$.&lt;br&gt;If $arr1[\frac{k}{2}]$ &amp;gt; $arr2[\frac{k}{2}]$, this means all the elements in $arr2$ before $arr2[\frac{k}{2}]$ must be smaller than the k-th smallest element, so just simply discard those elements. Then, since $\frac{k}{2}$ elements are dicarded, the problem becomes find the $ k - \frac{k}{2}$ smallest number. Vice versa. Keep recursion unitl $k == 1$ or the beginning index is larger than the size of the assigned array.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;findMedianSortedArrays&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] nums1, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] nums2)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len = nums1.length + nums2.length;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((len &amp;amp; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ) == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; findkth ( nums1, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, nums2, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, (len &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ) / &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (findkth ( nums1, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, nums2, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, (len &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) +&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    findkth ( nums1, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, nums2, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, len &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; )) / &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;findkth&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] arr1, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arr1Start, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] arr2, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arr2Start, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(arr1Start &amp;gt;= arr1.length)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arr2[arr2Start + k - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(arr2Start &amp;gt;= arr2.length)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arr1[arr1Start + k - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(k == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Math.min ( arr1[arr1Start], arr2[arr2Start] );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arr1Index = arr1Start + (k &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arr2Index = arr2Start + (k &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arr1Value = arr1Index &amp;gt;= arr1.length ? Integer.MAX_VALUE : arr1[arr1Index];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arr2Value = arr2Index &amp;gt;= arr2.length ? Integer.MAX_VALUE : arr2[arr2Index];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(arr1Value &amp;gt; arr2Value)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; findkth ( arr1, arr1Start, arr2, arr2Start + (k &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), k - (k &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; findkth ( arr1, arr1Start + (k &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), arr2, arr2Start,  k - (k &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Basic-ideas&quot;&gt;&lt;a href=&quot;#Basic-ideas&quot; class=&quot;headerlink&quot; title=&quot;Basic ideas&quot;&gt;&lt;/a&gt;Basic ideas&lt;/h2&gt;&lt;h3 id=&quot;Find-the-median&quot;&gt;&lt;a href=&quot;#Find-the-median&quot; class=&quot;headerlink&quot; title=&quot;Find the median&quot;&gt;&lt;/a&gt;Find the median&lt;/h3&gt;&lt;p&gt;This problem could be treated as a special case of find k-th smallest element in two sorted arrays. Say $m$ and $n$ are the lengths of the two arrays respectively. Then, if $m + n$ is odd, find the $ (\frac{m + n}{2} + 1)$th smallest element as the median. If $m + n$ is even, then find the $(\frac{m + n}{2})$th and the $(\frac{m + n}{2} + 1)$th smallest element, then count the average as the median.&lt;/p&gt;
&lt;h3 id=&quot;Find-the-k-th-smallest-element&quot;&gt;&lt;a href=&quot;#Find-the-k-th-smallest-element&quot; class=&quot;headerlink&quot; title=&quot;Find the k-th smallest element&quot;&gt;&lt;/a&gt;Find the k-th smallest element&lt;/h3&gt;&lt;p&gt;Using a divide-and-conquer style could reach a complexity of only $O(logK)$.&lt;br&gt;If there are two arrays, $arr1$ and $arr2$, then compare the values of $arr1[\frac{k}{2}]$ and $arr2[\frac{k}{2}]$.&lt;br&gt;If $arr1[\frac{k}{2}]$ &amp;gt; $arr2[\frac{k}{2}]$, this means all the elements in $arr2$ before $arr2[\frac{k}{2}]$ must be smaller than the k-th smallest element, so just simply discard those elements. Then, since $\frac{k}{2}$ elements are dicarded, the problem becomes find the $ k - \frac{k}{2}$ smallest number. Vice versa. Keep recursion unitl $k == 1$ or the beginning index is larger than the size of the assigned array.&lt;br&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yanzhen.me/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>003-Longest-Substring-Without-Repeating-Characters</title>
    <link href="http://yanzhen.me/2016/03/29/003-longest-substring-without-repeating-characters/"/>
    <id>http://yanzhen.me/2016/03/29/003-longest-substring-without-repeating-characters/</id>
    <published>2016-03-29T04:02:55.000Z</published>
    <updated>2017-01-17T09:12:42.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lengthOfLongestSubstring&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String s)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//boundary test&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(s.length () == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(s.length () == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//initialize params&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; header = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; footer = header + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; DUMMYINT = -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//vaule -1 for debugging&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len = s.length(); &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxlen = DUMMYINT; &lt;span class=&quot;comment&quot;&gt;//maxlen for maximal length&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//a set for storing intermediate none-duplicate char sets&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Set&amp;lt;Character&amp;gt; set = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashSet&amp;lt;&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//add head element to the set&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//here s has a length of at least 2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        set.add(s.charAt(header));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/*header and footer forms a window of maximal length&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            two operations:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            1. enlarge window size by footer + 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            2. reduce window size by header + 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            either left or right boundary moves right by 1 in each loop, if the index is valid&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//loop until header and footer both reach len - 1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (!(header &amp;gt;= footer &amp;amp;&amp;amp; footer == (len - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//otherwise index out of range, since &#39;s.charAt(footer)&#39; below&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(footer &amp;gt;= len)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//footer moves right, enlarging window size&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!set.contains(s.charAt(footer))) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                set.add ( s.charAt ( footer ) );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                ++footer;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//header moves right, reducing window size&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//whenever a duplicate key comes, count the max length&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                maxlen = Math.max ( set.size (), maxlen );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//move header to the right by 1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                set.remove ( s.charAt ( header ) );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                ++ header;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//in case this right header was not added before&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                set.add ( s.charAt ( header ) );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//adjust footer&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(header &amp;gt;= footer)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    footer = header + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//last check&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        maxlen = Math.max ( set.size (), maxlen );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; maxlen;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yanzhen.me/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>002-Add-Two-Numbers</title>
    <link href="http://yanzhen.me/2016/03/29/002-add-two-numbers/"/>
    <id>http://yanzhen.me/2016/03/29/002-add-two-numbers/</id>
    <published>2016-03-29T03:25:18.000Z</published>
    <updated>2017-01-17T09:12:42.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Basic-ideas&quot;&gt;&lt;a href=&quot;#Basic-ideas&quot; class=&quot;headerlink&quot; title=&quot;Basic ideas&quot;&gt;&lt;/a&gt;Basic ideas&lt;/h2&gt;&lt;p&gt;The problem is quite clear but with several tricks. Basicly just add the digits one by one and count in the carries, then move to the next digit by moving the pointer until the end.&lt;/p&gt;
&lt;h3 id=&quot;Trick-1&quot;&gt;&lt;a href=&quot;#Trick-1&quot; class=&quot;headerlink&quot; title=&quot;Trick 1&quot;&gt;&lt;/a&gt;Trick 1&lt;/h3&gt;&lt;p&gt;Need to initialize a pointer at the very beginning, then assign a random value to it. Upon returning, return pointer.next instead of itself.&lt;/p&gt;
&lt;h3 id=&quot;Trick-2&quot;&gt;&lt;a href=&quot;#Trick-2&quot; class=&quot;headerlink&quot; title=&quot;Trick 2&quot;&gt;&lt;/a&gt;Trick 2&lt;/h3&gt;&lt;p&gt;The two lists might in different lengths. Do not move any step further if a list has reached the end&lt;/p&gt;
&lt;h3 id=&quot;Trick-3&quot;&gt;&lt;a href=&quot;#Trick-3&quot; class=&quot;headerlink&quot; title=&quot;Trick 3&quot;&gt;&lt;/a&gt;Trick 3&lt;/h3&gt;&lt;p&gt;Remember the last carry, a new node must be created if the last carry is non-zero.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Definition for singly-linked list.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * public class ListNode &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *     int val;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *     ListNode next;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *     ListNode(int x) &amp;#123; val = x; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ListNode &lt;span class=&quot;title&quot;&gt;addTwoNumbers&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ListNode l1, ListNode l2)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ListNode ans = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ListNode(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;); ListNode pointer;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        pointer = ans; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; carry = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; tmp = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cur = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(l1 == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; l2 == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(l1 != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; || l2 != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                tmp = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//tmp result&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(l1 != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    tmp += l1.val;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    l1 = l1.next;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(l2 != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    tmp += l2.val;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    l2 = l2.next;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                tmp += carry;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//carry for next digit&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                carry = tmp / &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//current digit&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                cur = tmp % &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//set node value and link&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//then move to the next&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                pointer.next = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ListNode(cur);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                pointer = pointer.next;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(carry != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            pointer.next = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ListNode(carry);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans.next;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Basic-ideas&quot;&gt;&lt;a href=&quot;#Basic-ideas&quot; class=&quot;headerlink&quot; title=&quot;Basic ideas&quot;&gt;&lt;/a&gt;Basic ideas&lt;/h2&gt;&lt;p&gt;The problem is quite clear but with several tricks. Basicly just add the digits one by one and count in the carries, then move to the next digit by moving the pointer until the end.&lt;/p&gt;
&lt;h3 id=&quot;Trick-1&quot;&gt;&lt;a href=&quot;#Trick-1&quot; class=&quot;headerlink&quot; title=&quot;Trick 1&quot;&gt;&lt;/a&gt;Trick 1&lt;/h3&gt;&lt;p&gt;Need to initialize a pointer at the very beginning, then assign a random value to it. Upon returning, return pointer.next instead of itself.&lt;/p&gt;
&lt;h3 id=&quot;Trick-2&quot;&gt;&lt;a href=&quot;#Trick-2&quot; class=&quot;headerlink&quot; title=&quot;Trick 2&quot;&gt;&lt;/a&gt;Trick 2&lt;/h3&gt;&lt;p&gt;The two lists might in different lengths. Do not move any step further if a list has reached the end&lt;/p&gt;
&lt;h3 id=&quot;Trick-3&quot;&gt;&lt;a href=&quot;#Trick-3&quot; class=&quot;headerlink&quot; title=&quot;Trick 3&quot;&gt;&lt;/a&gt;Trick 3&lt;/h3&gt;&lt;p&gt;Remember the last carry, a new node must be created if the last carry is non-zero.&lt;br&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yanzhen.me/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>001-Two-Sum</title>
    <link href="http://yanzhen.me/2016/03/29/001-two-sum/"/>
    <id>http://yanzhen.me/2016/03/29/001-two-sum/</id>
    <published>2016-03-29T02:06:04.000Z</published>
    <updated>2017-01-17T09:12:42.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Basic-ideas&quot;&gt;&lt;a href=&quot;#Basic-ideas&quot; class=&quot;headerlink&quot; title=&quot;Basic ideas&quot;&gt;&lt;/a&gt;Basic ideas&lt;/h2&gt;&lt;p&gt;Traverse the array and store the visited elements in a map. Once a new traversing element comes, find its missing part in the map according to the target, namely, $target - nums[i]$. The total complexity is $O(Nlog(N))$.&lt;/p&gt;
&lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] twoSum(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] nums, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; target) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Map&amp;lt;Integer, Integer&amp;gt; m = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;Integer, Integer&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; nums.length; ++ i)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; tmp = target - nums[i];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(m.containsKey(tmp))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; res = m.get(tmp);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[]&amp;#123;i, res&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                m.put(nums[i], i);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Basic-ideas&quot;&gt;&lt;a href=&quot;#Basic-ideas&quot; class=&quot;headerlink&quot; title=&quot;Basic ideas&quot;&gt;&lt;/a&gt;Basic ideas&lt;/h2&gt;&lt;p&gt;Traverse the array and store the v
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yanzhen.me/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yanzhen.me/2016/03/07/hello-world/"/>
    <id>http://yanzhen.me/2016/03/07/hello-world/</id>
    <published>2016-03-07T03:06:04.000Z</published>
    <updated>2017-01-17T09:12:42.000Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo server&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo generate&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo deploy&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
