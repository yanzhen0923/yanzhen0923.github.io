<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YZ</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yanzhen.me/"/>
  <updated>2017-03-15T14:03:51.000Z</updated>
  <id>http://yanzhen.me/</id>
  
  <author>
    <name>Yan Zhen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>4b0aa8c5e4f51027706ac2c49959ee0f91a1e29</title>
    <link href="http://yanzhen.me/2017/03/14/4b0aa8c5e4f51027706ac2c49959ee0f91a1e29a/"/>
    <id>http://yanzhen.me/2017/03/14/4b0aa8c5e4f51027706ac2c49959ee0f91a1e29a/</id>
    <published>2017-03-14T10:56:34.000Z</published>
    <updated>2017-03-15T14:03:51.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;原理介绍&quot;&gt;&lt;a href=&quot;#原理介绍&quot; class=&quot;headerlink&quot; title=&quot;原理介绍&quot;&gt;&lt;/a&gt;原理介绍&lt;/h1&gt;&lt;p&gt;  分类器是在机器学期领域中对数据进行统计、分类及预测的一类重要方法，各种不同的分类器被广泛应用于工业界及各类数据挖掘的比赛中。目前已知的分类器方法有一大类主要基于集成学习，基于这个思想目前已知的有引导聚集算法或装袋法(Bagging)、自适应增强算法(Adaboost)、多重增强算法(Multiboost)、梯度增强算法(Gradient Boosting)和极限梯度增强算法(XGBoost)。本文将先介绍引导聚集算法和自适应增强算法作为引入，再重点介绍本文所使用的极限梯度增强算法。&lt;/p&gt;
&lt;h2 id=&quot;集成学习方法概述&quot;&gt;&lt;a href=&quot;#集成学习方法概述&quot; class=&quot;headerlink&quot; title=&quot;集成学习方法概述&quot;&gt;&lt;/a&gt;集成学习方法概述&lt;/h2&gt;&lt;p&gt;对于一个分类器来说，如果其模型结构较为复杂，则其很容易适应当前数据，即对于当前数据拟合有很好的效果，误差较小，但是这样很容易造成对数据的过度拟合(Overfitting)，不利于对于未知的数据进行预测。反之，如果一个模型结构较为简单，则虽然不至于对训练数据过度拟合，但有可能在训练集中产生较大的误差，这同样不利于分类器对未知的数据进行预测。集成学习方法综合了以上两个方向的有点来做机器学习，其目标是在模型的复杂度和数据模型拟合和准确率之间做一个最优的平衡，以达到优秀的预测效果。&lt;br&gt;对于一个给定的数据集，集成学习方法往往先将这个数据集分割成N个数据子集，在对这N个子集中的数据分别做训练调节分类器的结构和参数，形成一个弱分类器，最后对于一个未知数据，集成学习方法用这个N子集所预测出的N的结果用事先约定好的方法做集成，做出最终预测。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;自引导抽样法&quot;&gt;&lt;a href=&quot;#自引导抽样法&quot; class=&quot;headerlink&quot; title=&quot;自引导抽样法&quot;&gt;&lt;/a&gt;自引导抽样法&lt;/h3&gt;&lt;p&gt;这类方法是对于一个给定的数据集S, 生成N个数据子集的一类经典方法。自引导抽样法是一个有放回的抽样法，在假定每个元素都处于连续均匀分布情况下对每个元素进行等概率抽样，抽完样后将元素放回。例如，对于一个给定的数据集$D=\{(x_1,y_1),(x_2,y_2),…,(x_m,y_m)\}$，其中$x_i\in{R^{d}}, y_i\in{R}, |D|=m$， 数据集中有m个元素，在经过k次、每次抽取n的元素的抽样后，对于第i个数据集。对于某个数据子集，由于它是由有放回抽样的方法获取的，所以数据子集中的元素可能重复，但是数据子集中的每一个元素都属于原来给定的数据集$D$。&lt;br&gt;在这个有m的元素的数据集D中，每个元素每次被抽中的概率为$1\over m$, 那么每个元素不被抽中的概率就是$1-{1\over m}$, 所以在经过足够多次的抽样后，每个元素仍不被选进用于训练的数据子集的概率为$\lim{m\to \infty}{(1-{1\over m})}^{m} = {1\over e} \approx 0.368$。换言之，利用自引导抽样法可以将约$63.2\%$的原始数据作为训练集，而将其余的作为测试集。&lt;br&gt;自引导抽样法是生成训练数据的一种方法，本文其余部分生成数据子集的方法包括但不限于此方法。&lt;/p&gt;
&lt;h3 id=&quot;引导聚集算法&quot;&gt;&lt;a href=&quot;#引导聚集算法&quot; class=&quot;headerlink&quot; title=&quot;引导聚集算法&quot;&gt;&lt;/a&gt;引导聚集算法&lt;/h3&gt;&lt;p&gt;引导聚集算法是一个相对基本的增强学习方法，其基本原理是先利用自引导抽样法生成N个数据子集，再对每个数据子集分别训练分类器，当有需要预测的数据时，算法会让事先训练好的N个数据子集对应的N个分类器分别做预测，最后通过类似投票的方式产生最终结果。当对于某个特定的数据子集进行训练时，可以采用类似于L2范式的标准设计目标函数，测量训练目标与设计目标的欧几里得距离，目标函数的值越小说明训练效果越好。例如，对于第$i$个数据子集而言，其目标函数可以设计成$\sum_{i}^{n}{1\over 2}{(y_i-\hat{y_i})}^2$。对于预测结果，可以让所有的弱分类器对结果进行等权重投票，得票最高的数据即为最终结果。&lt;/p&gt;
&lt;h3 id=&quot;自适应增强算法&quot;&gt;&lt;a href=&quot;#自适应增强算法&quot; class=&quot;headerlink&quot; title=&quot;自适应增强算法&quot;&gt;&lt;/a&gt;自适应增强算法&lt;/h3&gt;&lt;p&gt;自适应增强算法是基于引导聚集算法的改进，它的工作原理是对于不同的元素根据分类或预测错误率设定抽样是的权重。例如在对第i个数据子集的预测完成后，算法会对第i次的预测进行评估，并筛选出预测结果有有误的部分，根据误差情况在将样本放回时适当地增加这些被错误预测的样本的抽样概率，这样在对第i+1次数据子集进行训练时，在第i轮被错误预测的数据会被重点训练，以此增强训练效果。例如，在第i轮训练时，第2、3、5号样本被错误预测，则本轮训练结束后在将样本放回时会增加2、3、5号样本被抽中的概率。在第i+1轮训练时，第2、3、5号样本就有很大的概率成为第i+1轮数据子集中的元素，这样第i+1轮训练出类来的分类器会适当地提高对第2、3、5号样本预测的精确度，而在第i+1轮训练结束后被错误预测的样本又会有很大的概率出现在下一轮的数据子集中。&lt;/p&gt;
&lt;h2 id=&quot;极限增强算法&quot;&gt;&lt;a href=&quot;#极限增强算法&quot; class=&quot;headerlink&quot; title=&quot;极限增强算法&quot;&gt;&lt;/a&gt;极限增强算法&lt;/h2&gt;&lt;p&gt;这个算法是由Tianqi Chen在2015年提出，是由梯度增强算法演变而来，目前已在Kaggle等数据挖掘类比赛中获得广泛应用并取得良好效果。&lt;/p&gt;
&lt;h3 id=&quot;核心算法&quot;&gt;&lt;a href=&quot;#核心算法&quot; class=&quot;headerlink&quot; title=&quot;核心算法&quot;&gt;&lt;/a&gt;核心算法&lt;/h3&gt;&lt;h4 id=&quot;算法背景&quot;&gt;&lt;a href=&quot;#算法背景&quot; class=&quot;headerlink&quot; title=&quot;算法背景&quot;&gt;&lt;/a&gt;算法背景&lt;/h4&gt;&lt;p&gt;对于一个数据集来说，我们可以用线性的模型来做回归以对未知的数据进行预测,即利用${\hat{y^i}}=\sum^{j}w^jx^{ij}$来做回归。其中${\hat{y_i}}$为预测结果,${w^j}$为参数，${x^{ij}}$为第i个数据样本的第j的维度。而对于一个线性模型来说，其最终的学习目的为学习一系列参数，即$\Theta=\{w_j|j=1,2,…d\}$。当有了最终的学习目标以后，我们希望让参数集合的表现足够优秀，于是我们可以设定目标函数以衡量参数的拟合程度。&lt;br&gt;一般地，为了同时达到数据准确拟合和避免过度拟合两个目标，我们会选用两个不同的函数来共同衡量拟合的准确度，即$Obj(\Theta)=L(\Theta)+\Omega(\Theta)$。其中，$L(\Theta)$为损失函数(Training loss)，这是一个用于衡量数据拟合准确度的函数；$\Omega(\Theta)$为正规化函数，这是一个用于衡量数据模型复杂度的指标，可以指示数据模型是否过度拟合。对于$L(\Theta)$来说，有不同的方式可以做测量，例如二次损失函数和逻辑损失函数(4)。对于$\Omega(\Theta)$来说，其衡量标准可选用L1范数和L2范数等(4、5)。上述连个函数是为了分别达到不同的子目标而设计的。损失函数的设计目标是让参数与训练数据尽量拟合，其值越小，说明其拟合度越高，与数据的真实分布就越接近。但是，由于模型较高的复杂度可能导致过度拟合，所以损失函数的值在足够小的时候可能反而不如未过度拟合的参数更接近真实分布，于是我们有了第二个设计目标，即正规化函数。正规化函数的值越高，则说明参数模型的复杂度越低，参数的选择就越不容易过度拟合，然而，如果正则化函数的值足够低，这可能也不利于参数的选择，因为过低的模型复杂度会导致损失函数的值过高。所以我们选择将这两个函数的值叠加来作为最终的目标函数。&lt;/p&gt;
&lt;h4 id=&quot;回归树&quot;&gt;&lt;a href=&quot;#回归树&quot; class=&quot;headerlink&quot; title=&quot;回归树&quot;&gt;&lt;/a&gt;回归树&lt;/h4&gt;&lt;p&gt;回归时，又称分类与回归树，是由普通决策树演变而来的一种分类器，其树形结构与决策逻辑与决策树类似，但与之不同的是回归树在每个叶子节点都包含一个值，回归树最终预测的结果同样采用了集成学习的思想，即利用不同的弱回归树的预测结果的和来作为最终预测结果。例如，如图(9)中的一课回归树，其树形结构与叶子节点的值都已经给定，节点的值代表某人与“爱玩电子游戏”的相关度，那么如果输入的数据是“男孩”，那么最终的预测值为左侧与右侧两棵树树和预测结果加和得到，即2+0.9=2.9。同理，如果输入的数据是“老爷爷”，那么最终的预测结果就是-1.9。回归树是一类优秀的在机器学期中的监督学习方法，目前有近半数的数据挖掘比赛中是由基于树的集成学习相关方法夺得冠军。回归树的优点在于，与输入数据的尺度无关，即不需要做正则化，另外可以支持高维度、大规模的数据。对于一个回归树来说，一般设计树的结构和参数的方法都是通过一些启发式的原则来决定，例如熵减，剪枝，高度限制和平滑化等，而这些启发式的规则恰好对应于目标函数中可量化的设计，即熵减对应损失函数，简直对应节点正规化，高度限制对应对函数空间的限制，平滑化对应在叶子节点处对其数值做做L2正规化。&lt;/p&gt;
&lt;h4 id=&quot;梯度增强&quot;&gt;&lt;a href=&quot;#梯度增强&quot; class=&quot;headerlink&quot; title=&quot;梯度增强&quot;&gt;&lt;/a&gt;梯度增强&lt;/h4&gt;&lt;p&gt;对于一个给定的目标函数(20.1)，我们可以采用叠加训练法选取参数，从一个常量预测结果开始，分多轮进行训练，每轮训练都会计算上一轮训练的结果与训练数据的残差，每轮训练时新的回归树都以最大限度弥补残差为目标。即从${\hat{y}_{i0}=0}$开始，训练&lt;br&gt;（20.2345)。在做叠加训练时，在第t轮迭代中，其预测结果为(21.1)，而在第t轮中目标函数可以写成(21.2)，如果采用二次损失函数作为目标函数额衡量标准，那么目标函数可以最终写成(21.3)，其中(21.3.1)为残差。所以现在目标转化为了对(22.1)的优化。这个函数仍然不易做直接优化，但是可以利用泰勒展开的原理将(22.1)近似为(22.4)，有了这个新的目标函数，我们就可以利用$f_t(x_i)$的一阶导数和二阶导数来的信息来做优化。这个新的目标函数除了对损失函数的设计，还有对树结构的复杂度的定义，即$\Omega(f_t)$。&lt;br&gt;为了更好地说明树的概念，我们对一棵叶子几点有权重的树做如下定义(24)。对于一棵树的复杂度，其定义为(25)。例如，对于(25)中的归回树，$T=3, w_1=+2, w_2=+0.1, w_3=-1$， 这棵树的复杂度计算结果为(25.2)。&lt;br&gt;在同时有了对损失函数和正规化函数的定义以后，我们可以以(26.4)作为最终目标。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;原理介绍&quot;&gt;&lt;a href=&quot;#原理介绍&quot; class=&quot;headerlink&quot; title=&quot;原理介绍&quot;&gt;&lt;/a&gt;原理介绍&lt;/h1&gt;&lt;p&gt;  分类器是在机器学期领域中对数据进行统计、分类及预测的一类重要方法，各种不同的分类器被广泛应用于工业界及各类数据挖掘的比赛中。目前已知的分类器方法有一大类主要基于集成学习，基于这个思想目前已知的有引导聚集算法或装袋法(Bagging)、自适应增强算法(Adaboost)、多重增强算法(Multiboost)、梯度增强算法(Gradient Boosting)和极限梯度增强算法(XGBoost)。本文将先介绍引导聚集算法和自适应增强算法作为引入，再重点介绍本文所使用的极限梯度增强算法。&lt;/p&gt;
&lt;h2 id=&quot;集成学习方法概述&quot;&gt;&lt;a href=&quot;#集成学习方法概述&quot; class=&quot;headerlink&quot; title=&quot;集成学习方法概述&quot;&gt;&lt;/a&gt;集成学习方法概述&lt;/h2&gt;&lt;p&gt;对于一个分类器来说，如果其模型结构较为复杂，则其很容易适应当前数据，即对于当前数据拟合有很好的效果，误差较小，但是这样很容易造成对数据的过度拟合(Overfitting)，不利于对于未知的数据进行预测。反之，如果一个模型结构较为简单，则虽然不至于对训练数据过度拟合，但有可能在训练集中产生较大的误差，这同样不利于分类器对未知的数据进行预测。集成学习方法综合了以上两个方向的有点来做机器学习，其目标是在模型的复杂度和数据模型拟合和准确率之间做一个最优的平衡，以达到优秀的预测效果。&lt;br&gt;对于一个给定的数据集，集成学习方法往往先将这个数据集分割成N个数据子集，在对这N个子集中的数据分别做训练调节分类器的结构和参数，形成一个弱分类器，最后对于一个未知数据，集成学习方法用这个N子集所预测出的N的结果用事先约定好的方法做集成，做出最终预测。&lt;br&gt;
    
    </summary>
    
    
      <category term="treeboosting" scheme="http://yanzhen.me/tags/treeboosting/"/>
    
  </entry>
  
  <entry>
    <title>009-Palindrome-Number</title>
    <link href="http://yanzhen.me/2016/04/10/009-palindrome-number/"/>
    <id>http://yanzhen.me/2016/04/10/009-palindrome-number/</id>
    <published>2016-04-10T21:02:01.000Z</published>
    <updated>2017-01-17T09:12:42.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Basic-ideas&quot;&gt;&lt;a href=&quot;#Basic-ideas&quot; class=&quot;headerlink&quot; title=&quot;Basic ideas&quot;&gt;&lt;/a&gt;Basic ideas&lt;/h2&gt;&lt;p&gt;Negetive integers are not palindrome. Compare the left-most with the right-most digits step by step.&lt;/p&gt;
&lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isPalindrome&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(x &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; divider = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (x / divider &amp;gt;= &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            divider *= &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; left; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; right;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (x != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            left = x / divider;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            right = x % &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(left != right)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            x = (x - left * divider) / &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            divider /= &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Basic-ideas&quot;&gt;&lt;a href=&quot;#Basic-ideas&quot; class=&quot;headerlink&quot; title=&quot;Basic ideas&quot;&gt;&lt;/a&gt;Basic ideas&lt;/h2&gt;&lt;p&gt;Negetive integers are not palindro
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yanzhen.me/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>008-String-to-Integer-atoi</title>
    <link href="http://yanzhen.me/2016/04/10/008-string-to-integer-atoi/"/>
    <id>http://yanzhen.me/2016/04/10/008-string-to-integer-atoi/</id>
    <published>2016-04-10T18:37:44.000Z</published>
    <updated>2017-01-17T09:12:42.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Basic-ideas&quot;&gt;&lt;a href=&quot;#Basic-ideas&quot; class=&quot;headerlink&quot; title=&quot;Basic ideas&quot;&gt;&lt;/a&gt;Basic ideas&lt;/h2&gt;&lt;p&gt;Find the first none-space character, check validation and the sign, then convert one by one. Once an invalid char or a number that is larger than Integer.MAX comes, return.&lt;/p&gt;
&lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;myAtoi&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String str)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sz = str.length();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(sz == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//find the first none-space char&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; start_index;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(start_index = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; start_index &amp;lt; sz; ++ start_index)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(str.charAt(start_index) != &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; ret = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//if the first char is not valid then return&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; tmp = str.charAt(start_index);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!(Character.isDigit(tmp) || tmp == &lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt; || tmp == &lt;span class=&quot;string&quot;&gt;&#39;+&#39;&lt;/span&gt;))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//if the first valid char means a negative number&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; sign_flag = (str.charAt(start_index) == &lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt;) ? &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt; : &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; pos_flag = Character.isDigit(str.charAt(start_index)) ? &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt; : &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = pos_flag ? start_index + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; : start_index; i &amp;lt; sz; ++ i)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//if a invalid char comes, return the previous result&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!(Character.isDigit(str.charAt(i))))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sign_flag ? -(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)ret : (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)ret;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//if the result is larger than Integer.MAX&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((ret * &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; + (Character.getNumericValue(str.charAt(i)))) &amp;gt; Integer.MAX_VALUE)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sign_flag ? Integer.MIN_VALUE : Integer.MAX_VALUE;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            ret = ret * &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; + Character.getNumericValue(str.charAt(i));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sign_flag ? -(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)ret : (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)ret;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Basic-ideas&quot;&gt;&lt;a href=&quot;#Basic-ideas&quot; class=&quot;headerlink&quot; title=&quot;Basic ideas&quot;&gt;&lt;/a&gt;Basic ideas&lt;/h2&gt;&lt;p&gt;Find the first none-space characte
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yanzhen.me/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>007-Reverse-Integer</title>
    <link href="http://yanzhen.me/2016/04/10/007-reverse-integer/"/>
    <id>http://yanzhen.me/2016/04/10/007-reverse-integer/</id>
    <published>2016-04-10T17:48:30.000Z</published>
    <updated>2017-01-17T09:12:42.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Basic-ideas&quot;&gt;&lt;a href=&quot;#Basic-ideas&quot; class=&quot;headerlink&quot; title=&quot;Basic ideas&quot;&gt;&lt;/a&gt;Basic ideas&lt;/h2&gt;&lt;p&gt;Another boring problem. Need to think over the max value of integer. The maximal value of 32-bit signed integer is $2147483647$, however reversing it becomes $7463847412$, which is larger than the max valuve of integer. A little tricky solution would be using a long variable to check if the result is larger than Integer.MAT_VALUE. &lt;/p&gt;
&lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; flag = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; res = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(x &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            x = -x;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            flag = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(;x &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            res *= &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            res += (x - x/&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            x /= &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(res &amp;gt; Integer.MAX_VALUE)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(flag)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            res = -res;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)res;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Basic-ideas&quot;&gt;&lt;a href=&quot;#Basic-ideas&quot; class=&quot;headerlink&quot; title=&quot;Basic ideas&quot;&gt;&lt;/a&gt;Basic ideas&lt;/h2&gt;&lt;p&gt;Another boring problem. Need to th
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yanzhen.me/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>006-ZigZag-Conversion</title>
    <link href="http://yanzhen.me/2016/03/31/006-zigzag-conversion/"/>
    <id>http://yanzhen.me/2016/03/31/006-zigzag-conversion/</id>
    <published>2016-03-30T22:02:19.000Z</published>
    <updated>2017-01-17T09:12:42.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Basic-ideas&quot;&gt;&lt;a href=&quot;#Basic-ideas&quot; class=&quot;headerlink&quot; title=&quot;Basic ideas&quot;&gt;&lt;/a&gt;Basic ideas&lt;/h2&gt;&lt;p&gt;A boring problem finding some regulations. The step length is $2numRows - 2$. The characters in the first row and the last row jumps regularly by the step length. For the rest rows, the index jumps by 2 different steps, $step1 = 2(numRows - i - 1)$ and $step2 = step - step1$ respectively. Set a flag to switch to the other length of step in the next jump.&lt;/p&gt;
&lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String s, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; numRows)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(s.length() == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; || numRows == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        StringBuilder str = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuilder();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; step = (numRows &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) - &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//first row&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; s.length(); i += step)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            str.append(s.charAt(i));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//middle rows&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; numRows - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; ++ i)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = i; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; flag = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; step1 = (numRows - i - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; step2 = step - step1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (j &amp;lt; s.length())&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                str.append(s.charAt(j));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(flag)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    j += step1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    j += step2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                flag ^= &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//last row&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = numRows - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; s.length(); i += step)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            str.append(s.charAt(i));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; str.toString();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Basic-ideas&quot;&gt;&lt;a href=&quot;#Basic-ideas&quot; class=&quot;headerlink&quot; title=&quot;Basic ideas&quot;&gt;&lt;/a&gt;Basic ideas&lt;/h2&gt;&lt;p&gt;A boring problem finding some regu
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yanzhen.me/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>005-Longest-Palindromic-Substring</title>
    <link href="http://yanzhen.me/2016/03/30/005-longest-palindromic-substring/"/>
    <id>http://yanzhen.me/2016/03/30/005-longest-palindromic-substring/</id>
    <published>2016-03-30T19:11:22.000Z</published>
    <updated>2017-01-17T09:12:42.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Basic-ideas&quot;&gt;&lt;a href=&quot;#Basic-ideas&quot; class=&quot;headerlink&quot; title=&quot;Basic ideas&quot;&gt;&lt;/a&gt;Basic ideas&lt;/h2&gt;&lt;p&gt;Using a classical dynamic-programming style, with a time complexity of $O(N^2)$ and space complexity of $O(N^2)$. A table is introduced to store the palidromic information. If $table[i][j]$ is true, it means the string from $s[i]$ to $s[j]$ is palindromic. Initially, $table[i][i]$ is set to true, as well as $table[i - 1][i]$ if $s[i - 1] == s[i]$. The transition model is, $table[i][j]$ is true if $table[i + 1][j - 1] == true$ and $s[i] == s[j]$. The model is the key point of DP. Upon the loop, the first level is the temporary length that grows from $2$ to $s.length()$. The second level is to keep a window and moves from the begnning to $s.length() - tempLen$, judging if the string inside the window is a valid string. The window’s size subjects to the temporary length. &lt;/p&gt;
&lt;h2 id=&quot;NB&quot;&gt;&lt;a href=&quot;#NB&quot; class=&quot;headerlink&quot; title=&quot;NB&quot;&gt;&lt;/a&gt;NB&lt;/h2&gt;&lt;p&gt;If loop from $0$ to $s.length()$ and assume each character(s) as the center of the palindromic string, then expand the string according to the center, the space complexity could be $O(1)$.&lt;br&gt;Manacher’s algorithm could solve it in a linear time, but is not super easy to implement. &lt;/p&gt;
&lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;longestPalindrome&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String s)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//edge test&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(s.length() &amp;lt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; DUMMY = -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len = s.length(); &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxLen = Integer.MIN_VALUE;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; iMark = DUMMY; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; jMark = DUMMY;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//transition table&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt;[][] table = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt;[len][len];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//initialization&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; len; ++ i)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            table[i][i] = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; len; ++ i)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(s.charAt(i) == s.charAt(i - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 table[i - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][i] = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 maxLen = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 iMark = i - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; jMark = i;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//state transition&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; tempLen = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; tempLen &amp;lt;= len; ++ tempLen)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; len - tempLen; ++ i)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = i + tempLen;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((table[i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]) &amp;amp;&amp;amp; (s.charAt(i) == s.charAt(j)))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    table[i][j] = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(( j - i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;gt; maxLen) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        maxLen = j - i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        iMark = i; jMark = j;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s.substring(iMark, jMark + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Basic-ideas&quot;&gt;&lt;a href=&quot;#Basic-ideas&quot; class=&quot;headerlink&quot; title=&quot;Basic ideas&quot;&gt;&lt;/a&gt;Basic ideas&lt;/h2&gt;&lt;p&gt;Using a classical dynamic-programm
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yanzhen.me/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>004-Median-of-Two-Sorted-Arrays</title>
    <link href="http://yanzhen.me/2016/03/29/004-median-of-two-sorted-arrays/"/>
    <id>http://yanzhen.me/2016/03/29/004-median-of-two-sorted-arrays/</id>
    <published>2016-03-29T04:10:21.000Z</published>
    <updated>2017-01-17T09:12:42.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Basic-ideas&quot;&gt;&lt;a href=&quot;#Basic-ideas&quot; class=&quot;headerlink&quot; title=&quot;Basic ideas&quot;&gt;&lt;/a&gt;Basic ideas&lt;/h2&gt;&lt;h3 id=&quot;Find-the-median&quot;&gt;&lt;a href=&quot;#Find-the-median&quot; class=&quot;headerlink&quot; title=&quot;Find the median&quot;&gt;&lt;/a&gt;Find the median&lt;/h3&gt;&lt;p&gt;This problem could be treated as a special case of find k-th smallest element in two sorted arrays. Say $m$ and $n$ are the lengths of the two arrays respectively. Then, if $m + n$ is odd, find the $ (\frac{m + n}{2} + 1)$th smallest element as the median. If $m + n$ is even, then find the $(\frac{m + n}{2})$th and the $(\frac{m + n}{2} + 1)$th smallest element, then count the average as the median.&lt;/p&gt;
&lt;h3 id=&quot;Find-the-k-th-smallest-element&quot;&gt;&lt;a href=&quot;#Find-the-k-th-smallest-element&quot; class=&quot;headerlink&quot; title=&quot;Find the k-th smallest element&quot;&gt;&lt;/a&gt;Find the k-th smallest element&lt;/h3&gt;&lt;p&gt;Using a divide-and-conquer style could reach a complexity of only $O(logK)$.&lt;br&gt;If there are two arrays, $arr1$ and $arr2$, then compare the values of $arr1[\frac{k}{2}]$ and $arr2[\frac{k}{2}]$.&lt;br&gt;If $arr1[\frac{k}{2}]$ &amp;gt; $arr2[\frac{k}{2}]$, this means all the elements in $arr2$ before $arr2[\frac{k}{2}]$ must be smaller than the k-th smallest element, so just simply discard those elements. Then, since $\frac{k}{2}$ elements are dicarded, the problem becomes find the $ k - \frac{k}{2}$ smallest number. Vice versa. Keep recursion unitl $k == 1$ or the beginning index is larger than the size of the assigned array.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;findMedianSortedArrays&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] nums1, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] nums2)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len = nums1.length + nums2.length;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((len &amp;amp; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ) == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; findkth ( nums1, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, nums2, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, (len &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ) / &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (findkth ( nums1, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, nums2, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, (len &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) +&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    findkth ( nums1, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, nums2, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, len &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; )) / &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;findkth&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] arr1, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arr1Start, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] arr2, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arr2Start, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(arr1Start &amp;gt;= arr1.length)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arr2[arr2Start + k - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(arr2Start &amp;gt;= arr2.length)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arr1[arr1Start + k - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(k == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Math.min ( arr1[arr1Start], arr2[arr2Start] );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arr1Index = arr1Start + (k &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arr2Index = arr2Start + (k &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arr1Value = arr1Index &amp;gt;= arr1.length ? Integer.MAX_VALUE : arr1[arr1Index];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arr2Value = arr2Index &amp;gt;= arr2.length ? Integer.MAX_VALUE : arr2[arr2Index];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(arr1Value &amp;gt; arr2Value)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; findkth ( arr1, arr1Start, arr2, arr2Start + (k &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), k - (k &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; findkth ( arr1, arr1Start + (k &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), arr2, arr2Start,  k - (k &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Basic-ideas&quot;&gt;&lt;a href=&quot;#Basic-ideas&quot; class=&quot;headerlink&quot; title=&quot;Basic ideas&quot;&gt;&lt;/a&gt;Basic ideas&lt;/h2&gt;&lt;h3 id=&quot;Find-the-median&quot;&gt;&lt;a href=&quot;#Find-the-median&quot; class=&quot;headerlink&quot; title=&quot;Find the median&quot;&gt;&lt;/a&gt;Find the median&lt;/h3&gt;&lt;p&gt;This problem could be treated as a special case of find k-th smallest element in two sorted arrays. Say $m$ and $n$ are the lengths of the two arrays respectively. Then, if $m + n$ is odd, find the $ (\frac{m + n}{2} + 1)$th smallest element as the median. If $m + n$ is even, then find the $(\frac{m + n}{2})$th and the $(\frac{m + n}{2} + 1)$th smallest element, then count the average as the median.&lt;/p&gt;
&lt;h3 id=&quot;Find-the-k-th-smallest-element&quot;&gt;&lt;a href=&quot;#Find-the-k-th-smallest-element&quot; class=&quot;headerlink&quot; title=&quot;Find the k-th smallest element&quot;&gt;&lt;/a&gt;Find the k-th smallest element&lt;/h3&gt;&lt;p&gt;Using a divide-and-conquer style could reach a complexity of only $O(logK)$.&lt;br&gt;If there are two arrays, $arr1$ and $arr2$, then compare the values of $arr1[\frac{k}{2}]$ and $arr2[\frac{k}{2}]$.&lt;br&gt;If $arr1[\frac{k}{2}]$ &amp;gt; $arr2[\frac{k}{2}]$, this means all the elements in $arr2$ before $arr2[\frac{k}{2}]$ must be smaller than the k-th smallest element, so just simply discard those elements. Then, since $\frac{k}{2}$ elements are dicarded, the problem becomes find the $ k - \frac{k}{2}$ smallest number. Vice versa. Keep recursion unitl $k == 1$ or the beginning index is larger than the size of the assigned array.&lt;br&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yanzhen.me/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>003-Longest-Substring-Without-Repeating-Characters</title>
    <link href="http://yanzhen.me/2016/03/29/003-longest-substring-without-repeating-characters/"/>
    <id>http://yanzhen.me/2016/03/29/003-longest-substring-without-repeating-characters/</id>
    <published>2016-03-29T04:02:55.000Z</published>
    <updated>2017-01-17T09:12:42.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lengthOfLongestSubstring&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String s)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//boundary test&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(s.length () == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(s.length () == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//initialize params&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; header = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; footer = header + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; DUMMYINT = -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//vaule -1 for debugging&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len = s.length(); &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxlen = DUMMYINT; &lt;span class=&quot;comment&quot;&gt;//maxlen for maximal length&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//a set for storing intermediate none-duplicate char sets&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Set&amp;lt;Character&amp;gt; set = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashSet&amp;lt;&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//add head element to the set&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//here s has a length of at least 2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        set.add(s.charAt(header));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/*header and footer forms a window of maximal length&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            two operations:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            1. enlarge window size by footer + 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            2. reduce window size by header + 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            either left or right boundary moves right by 1 in each loop, if the index is valid&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//loop until header and footer both reach len - 1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (!(header &amp;gt;= footer &amp;amp;&amp;amp; footer == (len - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//otherwise index out of range, since &#39;s.charAt(footer)&#39; below&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(footer &amp;gt;= len)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//footer moves right, enlarging window size&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!set.contains(s.charAt(footer))) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                set.add ( s.charAt ( footer ) );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                ++footer;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//header moves right, reducing window size&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//whenever a duplicate key comes, count the max length&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                maxlen = Math.max ( set.size (), maxlen );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//move header to the right by 1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                set.remove ( s.charAt ( header ) );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                ++ header;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//in case this right header was not added before&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                set.add ( s.charAt ( header ) );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//adjust footer&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(header &amp;gt;= footer)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    footer = header + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//last check&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        maxlen = Math.max ( set.size (), maxlen );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; maxlen;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yanzhen.me/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>002-Add-Two-Numbers</title>
    <link href="http://yanzhen.me/2016/03/29/002-add-two-numbers/"/>
    <id>http://yanzhen.me/2016/03/29/002-add-two-numbers/</id>
    <published>2016-03-29T03:25:18.000Z</published>
    <updated>2017-01-17T09:12:42.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Basic-ideas&quot;&gt;&lt;a href=&quot;#Basic-ideas&quot; class=&quot;headerlink&quot; title=&quot;Basic ideas&quot;&gt;&lt;/a&gt;Basic ideas&lt;/h2&gt;&lt;p&gt;The problem is quite clear but with several tricks. Basicly just add the digits one by one and count in the carries, then move to the next digit by moving the pointer until the end.&lt;/p&gt;
&lt;h3 id=&quot;Trick-1&quot;&gt;&lt;a href=&quot;#Trick-1&quot; class=&quot;headerlink&quot; title=&quot;Trick 1&quot;&gt;&lt;/a&gt;Trick 1&lt;/h3&gt;&lt;p&gt;Need to initialize a pointer at the very beginning, then assign a random value to it. Upon returning, return pointer.next instead of itself.&lt;/p&gt;
&lt;h3 id=&quot;Trick-2&quot;&gt;&lt;a href=&quot;#Trick-2&quot; class=&quot;headerlink&quot; title=&quot;Trick 2&quot;&gt;&lt;/a&gt;Trick 2&lt;/h3&gt;&lt;p&gt;The two lists might in different lengths. Do not move any step further if a list has reached the end&lt;/p&gt;
&lt;h3 id=&quot;Trick-3&quot;&gt;&lt;a href=&quot;#Trick-3&quot; class=&quot;headerlink&quot; title=&quot;Trick 3&quot;&gt;&lt;/a&gt;Trick 3&lt;/h3&gt;&lt;p&gt;Remember the last carry, a new node must be created if the last carry is non-zero.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Definition for singly-linked list.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * public class ListNode &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *     int val;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *     ListNode next;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *     ListNode(int x) &amp;#123; val = x; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ListNode &lt;span class=&quot;title&quot;&gt;addTwoNumbers&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ListNode l1, ListNode l2)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ListNode ans = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ListNode(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;); ListNode pointer;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        pointer = ans; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; carry = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; tmp = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cur = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(l1 == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; l2 == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(l1 != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; || l2 != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                tmp = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//tmp result&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(l1 != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    tmp += l1.val;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    l1 = l1.next;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(l2 != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    tmp += l2.val;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    l2 = l2.next;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                tmp += carry;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//carry for next digit&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                carry = tmp / &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//current digit&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                cur = tmp % &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//set node value and link&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//then move to the next&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                pointer.next = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ListNode(cur);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                pointer = pointer.next;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(carry != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            pointer.next = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ListNode(carry);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans.next;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Basic-ideas&quot;&gt;&lt;a href=&quot;#Basic-ideas&quot; class=&quot;headerlink&quot; title=&quot;Basic ideas&quot;&gt;&lt;/a&gt;Basic ideas&lt;/h2&gt;&lt;p&gt;The problem is quite clear but with several tricks. Basicly just add the digits one by one and count in the carries, then move to the next digit by moving the pointer until the end.&lt;/p&gt;
&lt;h3 id=&quot;Trick-1&quot;&gt;&lt;a href=&quot;#Trick-1&quot; class=&quot;headerlink&quot; title=&quot;Trick 1&quot;&gt;&lt;/a&gt;Trick 1&lt;/h3&gt;&lt;p&gt;Need to initialize a pointer at the very beginning, then assign a random value to it. Upon returning, return pointer.next instead of itself.&lt;/p&gt;
&lt;h3 id=&quot;Trick-2&quot;&gt;&lt;a href=&quot;#Trick-2&quot; class=&quot;headerlink&quot; title=&quot;Trick 2&quot;&gt;&lt;/a&gt;Trick 2&lt;/h3&gt;&lt;p&gt;The two lists might in different lengths. Do not move any step further if a list has reached the end&lt;/p&gt;
&lt;h3 id=&quot;Trick-3&quot;&gt;&lt;a href=&quot;#Trick-3&quot; class=&quot;headerlink&quot; title=&quot;Trick 3&quot;&gt;&lt;/a&gt;Trick 3&lt;/h3&gt;&lt;p&gt;Remember the last carry, a new node must be created if the last carry is non-zero.&lt;br&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yanzhen.me/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>001-Two-Sum</title>
    <link href="http://yanzhen.me/2016/03/29/001-two-sum/"/>
    <id>http://yanzhen.me/2016/03/29/001-two-sum/</id>
    <published>2016-03-29T02:06:04.000Z</published>
    <updated>2017-01-17T09:12:42.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Basic-ideas&quot;&gt;&lt;a href=&quot;#Basic-ideas&quot; class=&quot;headerlink&quot; title=&quot;Basic ideas&quot;&gt;&lt;/a&gt;Basic ideas&lt;/h2&gt;&lt;p&gt;Traverse the array and store the visited elements in a map. Once a new traversing element comes, find its missing part in the map according to the target, namely, $target - nums[i]$. The total complexity is $O(Nlog(N))$.&lt;/p&gt;
&lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] twoSum(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] nums, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; target) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Map&amp;lt;Integer, Integer&amp;gt; m = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;Integer, Integer&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; nums.length; ++ i)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; tmp = target - nums[i];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(m.containsKey(tmp))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; res = m.get(tmp);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[]&amp;#123;i, res&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                m.put(nums[i], i);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Basic-ideas&quot;&gt;&lt;a href=&quot;#Basic-ideas&quot; class=&quot;headerlink&quot; title=&quot;Basic ideas&quot;&gt;&lt;/a&gt;Basic ideas&lt;/h2&gt;&lt;p&gt;Traverse the array and store the v
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yanzhen.me/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yanzhen.me/2016/03/07/hello-world/"/>
    <id>http://yanzhen.me/2016/03/07/hello-world/</id>
    <published>2016-03-07T03:06:04.000Z</published>
    <updated>2017-01-17T09:12:42.000Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo server&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo generate&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo deploy&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
